/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as PaymentManagementIndexImport } from './routes/paymentManagement/index';

// Create Virtual Routes

const TodoIndexLazyImport = createFileRoute('/todo/')();
const StoreIndexLazyImport = createFileRoute('/store/')();
const PaymentIndexLazyImport = createFileRoute('/payment/')();
const OrderIndexLazyImport = createFileRoute('/order/')();
const NoticeIndexLazyImport = createFileRoute('/notice/')();
const LoginIndexLazyImport = createFileRoute('/login/')();
const AdditionalIndexLazyImport = createFileRoute('/additional/')();

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const TodoIndexLazyRoute = TodoIndexLazyImport.update({
  id: '/todo/',
  path: '/todo/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/todo/index.lazy').then((d) => d.Route));

const StoreIndexLazyRoute = StoreIndexLazyImport.update({
  id: '/store/',
  path: '/store/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/store/index.lazy').then((d) => d.Route));

const PaymentIndexLazyRoute = PaymentIndexLazyImport.update({
  id: '/payment/',
  path: '/payment/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/payment/index.lazy').then((d) => d.Route));

const OrderIndexLazyRoute = OrderIndexLazyImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/order/index.lazy').then((d) => d.Route));

const NoticeIndexLazyRoute = NoticeIndexLazyImport.update({
  id: '/notice/',
  path: '/notice/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/notice/index.lazy').then((d) => d.Route));

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route));

const AdditionalIndexLazyRoute = AdditionalIndexLazyImport.update({
  id: '/additional/',
  path: '/additional/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/additional/index.lazy').then((d) => d.Route));

const PaymentManagementIndexRoute = PaymentManagementIndexImport.update({
  id: '/paymentManagement/',
  path: '/paymentManagement/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/paymentManagement/': {
      id: '/paymentManagement/';
      path: '/paymentManagement';
      fullPath: '/paymentManagement';
      preLoaderRoute: typeof PaymentManagementIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/additional/': {
      id: '/additional/';
      path: '/additional';
      fullPath: '/additional';
      preLoaderRoute: typeof AdditionalIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/login/': {
      id: '/login/';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/notice/': {
      id: '/notice/';
      path: '/notice';
      fullPath: '/notice';
      preLoaderRoute: typeof NoticeIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/order/': {
      id: '/order/';
      path: '/order';
      fullPath: '/order';
      preLoaderRoute: typeof OrderIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/payment/': {
      id: '/payment/';
      path: '/payment';
      fullPath: '/payment';
      preLoaderRoute: typeof PaymentIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/store/': {
      id: '/store/';
      path: '/store';
      fullPath: '/store';
      preLoaderRoute: typeof StoreIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/todo/': {
      id: '/todo/';
      path: '/todo';
      fullPath: '/todo';
      preLoaderRoute: typeof TodoIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/paymentManagement': typeof PaymentManagementIndexRoute;
  '/additional': typeof AdditionalIndexLazyRoute;
  '/login': typeof LoginIndexLazyRoute;
  '/notice': typeof NoticeIndexLazyRoute;
  '/order': typeof OrderIndexLazyRoute;
  '/payment': typeof PaymentIndexLazyRoute;
  '/store': typeof StoreIndexLazyRoute;
  '/todo': typeof TodoIndexLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/paymentManagement': typeof PaymentManagementIndexRoute;
  '/additional': typeof AdditionalIndexLazyRoute;
  '/login': typeof LoginIndexLazyRoute;
  '/notice': typeof NoticeIndexLazyRoute;
  '/order': typeof OrderIndexLazyRoute;
  '/payment': typeof PaymentIndexLazyRoute;
  '/store': typeof StoreIndexLazyRoute;
  '/todo': typeof TodoIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/paymentManagement/': typeof PaymentManagementIndexRoute;
  '/additional/': typeof AdditionalIndexLazyRoute;
  '/login/': typeof LoginIndexLazyRoute;
  '/notice/': typeof NoticeIndexLazyRoute;
  '/order/': typeof OrderIndexLazyRoute;
  '/payment/': typeof PaymentIndexLazyRoute;
  '/store/': typeof StoreIndexLazyRoute;
  '/todo/': typeof TodoIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/paymentManagement'
    | '/additional'
    | '/login'
    | '/notice'
    | '/order'
    | '/payment'
    | '/store'
    | '/todo';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/paymentManagement' | '/additional' | '/login' | '/notice' | '/order' | '/payment' | '/store' | '/todo';
  id:
    | '__root__'
    | '/'
    | '/paymentManagement/'
    | '/additional/'
    | '/login/'
    | '/notice/'
    | '/order/'
    | '/payment/'
    | '/store/'
    | '/todo/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  PaymentManagementIndexRoute: typeof PaymentManagementIndexRoute;
  AdditionalIndexLazyRoute: typeof AdditionalIndexLazyRoute;
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute;
  NoticeIndexLazyRoute: typeof NoticeIndexLazyRoute;
  OrderIndexLazyRoute: typeof OrderIndexLazyRoute;
  PaymentIndexLazyRoute: typeof PaymentIndexLazyRoute;
  StoreIndexLazyRoute: typeof StoreIndexLazyRoute;
  TodoIndexLazyRoute: typeof TodoIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PaymentManagementIndexRoute: PaymentManagementIndexRoute,
  AdditionalIndexLazyRoute: AdditionalIndexLazyRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  NoticeIndexLazyRoute: NoticeIndexLazyRoute,
  OrderIndexLazyRoute: OrderIndexLazyRoute,
  PaymentIndexLazyRoute: PaymentIndexLazyRoute,
  StoreIndexLazyRoute: StoreIndexLazyRoute,
  TodoIndexLazyRoute: TodoIndexLazyRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/paymentManagement/",
        "/additional/",
        "/login/",
        "/notice/",
        "/order/",
        "/payment/",
        "/store/",
        "/todo/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/paymentManagement/": {
      "filePath": "paymentManagement/index.tsx"
    },
    "/additional/": {
      "filePath": "additional/index.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.lazy.tsx"
    },
    "/notice/": {
      "filePath": "notice/index.lazy.tsx"
    },
    "/order/": {
      "filePath": "order/index.lazy.tsx"
    },
    "/payment/": {
      "filePath": "payment/index.lazy.tsx"
    },
    "/store/": {
      "filePath": "store/index.lazy.tsx"
    },
    "/todo/": {
      "filePath": "todo/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
