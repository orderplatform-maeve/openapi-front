# This is a basic workflow to help you get started with Actions

name: CI Product

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [ master ]
    types: [ closed ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  product_deploy:
    if: github.event.pull_request.merged == true
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      - name: Cache node modules  # node modules 캐싱
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-master-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Build
        run: yarn build:prod

      - name: Deploy
        env:
          BUCKET_NAME: orderview.torder.co.kr
          SIGNATURE_VERSION: v4
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        run: yarn deploy:action:prod

      - uses: actions-ecosystem/action-get-latest-tag@v1 # 깃 허브 최근 태그 이름 알아 내기 위해
        id: get-latest-tag

      - name: Actions-Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              text: '*오더뷰 프로덕트 업데이트*',
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                fields: [
                  {
                    title: '버젼',
                    value: '${{steps.get-latest-tag.outputs.tag}}',
                    short: false
                  },
                  {
                    title: '업데이트 내용',
                    value: `${process.env.AS_MESSAGE}`,
                    short: false
                  },
                  {
                    title: '저장소',
                    value: `${process.env.AS_REPO}`,
                    short: false
                  },
                  {
                    title: '저자',
                    value: `${process.env.AS_AUTHOR}`,
                    short: false
                  },
                  {
                    title: 'JOB',
                    value: `${process.env.AS_JOB}`,
                    short: false
                  },
                  {
                    title: 'TOOK',
                    value: `${process.env.AS_TOOK}`,
                    short: false
                  },
                  {
                    title: 'event name',
                    value: `${process.env.AS_EVENT_NAME}`,
                    short: false
                  },
                  {
                    title: 'workflow',
                    value: `${process.env.AS_WORKFLOW}`,
                    short: false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
